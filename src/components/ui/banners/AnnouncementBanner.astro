---
const { title, btnId, btnTitle, url } = Astro.props;

interface Props {
  title?: string;
  btnId: string;
  btnTitle: string;
  url: string;
}
---

<astro-banner btnId={btnId}>
  <div
    class="fixed bottom-0 start-1/2 z-50 mx-auto w-full -translate-x-1/2 transform p-6 sm:max-w-4xl"
    role="region"
    aria-label="Informational Banner"
  >
    <div>
      <div>
        <div>
          {title && <p>{title}</p>}<a
            >{btnTitle}
            <svg
              class="size-4 flex-shrink-0 transition duration-300 group-hover:translate-x-1"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"><path d="m9 18 6-6-6-6"></path></svg
            ></a
          >
        </div>
        <button id={btnId}>
          <span>Dismiss</span>
          <svg
            class="size-5 flex-shrink-0"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            ><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg
          >
        </button>
      </div>
    </div>
  </div>
</astro-banner>
<script>
  class AstroBanner extends HTMLElement {
    connectedCallBack() {
      const btnId = this.getAttribute("btnId");
      const button = this.querySelector(`#${btnId}`);
      if (button != null) {
        button.addEventListener("click", () => this.remove());
      }
    }
  }
  customElements.define("astro-banner", AstroBanner);
</script>
